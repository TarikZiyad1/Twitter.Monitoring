AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  TwitterMonitoringApp

  Sample SAM Template for TwitterMonitoringApp

Parameters:
  NotificationEmail:
    Type: String
    Default: email@domain.com  
    

Globals:
  Function:
    Timeout: 10
    Tracing: Active
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    Environment:
        Variables:
          TableName: !Ref TweetsTable

Resources:

  TweetsArchiveS3Bucket:
    Type: 'AWS::S3::Bucket'

  TweetsTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema: 
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: OLD_IMAGE

  StoreTweetsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: TwitterMonitoring/
      Handler: storeTweets.lambdaHandler     
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetsTable
      Events:
        StoreTweets:
          Type: Api 
          Properties:
            Path: /storetweets
            Method: put
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - Handlers/storeTweets/storeTweets.ts

  ArchiveTweetsFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: TwitterMonitoring/
      Handler: archiveTweets.lambdaHandler     
      Environment:
        Variables:
          TweetsArchiveS3Bucket: !Ref TweetsArchiveS3Bucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref TweetsArchiveS3Bucket
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt TweetsTable.StreamArn
            BatchSize: 100
            StartingPosition: TRIM_HORIZON
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - Handlers/archiveTweets/archiveTweets.ts
  
  #The anomaly detection part
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Protocol: email
        Endpoint: !Ref NotificationEmail
  
  LambdaInvocationsAnomalyDetector:
    Type: AWS::CloudWatch::AnomalyDetector
    Properties:
      MetricName: Invocations
      Namespace: AWS/Lambda
      Stat: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref StoreTweetsFunction

  LambdaInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda invocations
      AlarmName: LambdaInvocationsAlarm
      ComparisonOperator: LessThanLowerOrGreaterThanUpperThreshold
      EvaluationPeriods: 1
      Metrics:
      - Expression: ANOMALY_DETECTION_BAND(m1, 0.7)
        Id: ad1
      - Id: m1
        MetricStat:
          Metric:
            MetricName: Invocations
            Namespace: AWS/Lambda
          Period: !!int 60
          Stat: Sum
      ThresholdMetricId: ad1
      TreatMissingData: breaching
      AlarmActions:
        - !Ref AlarmTopic

Outputs: 
  StoreTweetsApi:
    Description: "API Gateway endpoint URL for Prod stage for Store Tweets function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/storetweets/"
 
